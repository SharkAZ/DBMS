
create database hw3;

--------------------------------------------

use hw3;

--------------------------------------------

create table merchants
(
    mid                 int(4) not null,
    name                varchar(40),
    city                varchar(40),
    state               varchar(40),
    primary key(mid) 
);



-------------------------------------------

create table products
(
    pid                 int(4) not null,
    name                varchar(40),
    category            varchar(40),
    description         varchar(1000),
    constraint  name_constr check (name in ('Printer', 'Ethernet Adapter', 'Desktop', 'Hard Drive', 'Laptop', 'Router', 'Network Card', 'Super Drive', 'Monitor')),
    constraint  category_constr check (category in ('Peripheral', 'Networking', 'Computer')),
    primary key(pid)
);



--------------------------------------------

create table sell
(
    mid 		 	int(4) not null,
    pid 			int(4) not null,
    price			float(10, 2) not null,
    quantity_available	int(4),
    constraint price_constr check (price between 0 and 100000),
    constraint quantity_available_constr check (quantity_available between 0 and 1000),
    foreign key(mid) references merchants(mid),
    foreign key(pid) references products(pid)
);



--------------------------------------------

create table orders
(
    oid                 int(4) not null,
    shipping_method     varchar(40),
    shipping_cost       float(10, 2) not null,
    constraint  shipping_method_constr check (shipping_method in ('UPS', 'FedEx', 'USPS')),
    constraint  shipping_cost_constr check (shipping_cost between 0 and 500),
    primary key(oid)
);




--------------------------------------------

create table contain
(
   oid      int(4) not null,
   pid      int(4) not null,
   foreign key(oid) references orders(oid),
   foreign key(pid) references products(pid)
);




--------------------------------------------

create table customers
(
   cid          int(4) not null,
   fullname     varchar(40),
   city         varchar(40),
   state        varchar(40),
   primary key(cid) 
);




--------------------------------------------

create table place
(
   cid          int(4) not null,
   oid          int(4) not null,
   order_date   date,
   foreign key(cid) references customers(cid),
   foreign key(oid) references orders(oid)
);




--------------------------------------------

Q1)List names and sellers of products that are no longer available (quantity=0)



select products.name as products_name, merchants.name as seller_name
from products 
inner join sell on products.pid = sell.pid
inner join merchants on sell.mid = merchants.mid
where sell.quantity_available = 0;


OR


select p.name as products_name, m.name as seller_name
from products p
inner join sell s on p.pid = s.pid
inner join merchants m on s.mid = m.mid
where s.quantity_available = 0;




--------------------------------------------

Q2)List names and descriptions of products that are not sold.


select products.name as products_name, products.description
from products 
left join sell on products.pid = sell.pid
where sell.mid is null;

OR

select p.name as products_name, p.description
from products p
left join sell s on p.pid = s.pid
where s.mid is null;


--------------------------------------------

Q3)How many customers bought SATA drives but not any routers?

select count(c.cid) as customers_count
from customers c
inner join place p on c.cid = p.cid
inner join orders o on p.oid = o.oid
inner join contain ct on o.oid = ct.oid
inner join products pd on ct.pid = pd.pid
where pd.description like '%SATA%' and pd.name not like '%Router%';


--------------------------------------------

Q4)HP has a 20% sale on all its Networking products.


update sell
set price = price * 0.8
where mid =
(
    select mid 
    from merchants
    where name = 'HP'
)
  and pid in 
(
    select pid 
    from products
    where category = 'Networking'
);



--------------------------------------------

Q5)What did Uriel Whitney order from Acer? (make sure to at least retrieve product names and prices).


select p.name as product_name, s.price
from products p
inner join contain c on p.pid = c.pid
inner join orders o on c.oid = o.oid
inner join place pl on o.oid = pl.oid
inner join customers ct on pl.cid = ct.cid
inner join sell s on p.pid = s.pid
inner join merchants m on s.mid = m.mid
where ct.fullname = 'Uriel Whitney'
and m.name = 'Acer';



--------------------------------------------

Q6)List the annual total sales for each company (sort the results along the company and the year attributes).


select m.name as company, year(p.order_date) as year, sum(s.price * s.quantity_available) as annual_total_sales
from merchants m
inner join sell s on m.mid = s.mid
inner join products pd on s.pid = pd.pid
inner join contain c on pd.pid = c.pid
inner join place p on  c.oid = p.oid
group by m.name, year(p.order_date)
order by m.name, year(p.order_date);



--------------------------------------------

Q7)Which company had the highest annual revenue and in what year?


select m.name as company, year(p.order_date) as year, sum(s.price * s.quantity_available) as annual_total_sales
from merchants m
inner join sell s on m.mid = s.mid
inner join products pd on s.pid = pd.pid
inner join contain c on pd.pid = c.pid
inner join place p on  c.oid = p.oid
group by m.name, year(p.order_date)
having annual_total_sales >= all
(
    select sum(s.price * s.quantity_available) as annual_total_sales
    from merchants m
    inner join sell s on m.mid = s.mid
    inner join contain c on s.pid = c.pid
    inner join place p on  c.oid = p.oid
    group by m.name, year(p.order_date)
)



--------------------------------------------

Q8)On average, what was the cheapest shipping method used ever?


with
    CheapestShipping as
    (
        select oid, shipping_method, min(shipping_cost) as min_shipping_cost
        from orders
        group by oid, shipping_method
    )
select shipping_method, avg(min_shipping_cost) as average_cheapest_shipping_cost
from CheapestShipping
group by shipping_method
having average_cheapest_shipping_cost <=
(
    select avg(min_shipping_cost) as average_cheapest_shipping_cost
    from CheapestShipping
)


--------------------------------------------

Q9)What is the best sold ($) category for each company?


select m.name as company, p.category as best_sold_category, sum(s.price * s.quantity_available) as total_revenue
from merchants m
inner join sell s on m.mid = s.mid
inner join products p on s.pid = p.pid
group by m.name, p.category
having sum(s.price * s.quantity_available) = 
(
    select max(total_revenue)
    from 
    (
        select m.name as company, p.category as best_sold_category, sum(s.price * s.quantity_available) as total_revenue
        from merchants m
        inner join sell s on m.mid = s.mid
        inner join products p on s.pid = p.pid
        group by m.name, p.category
    )   as max_revenue_per_category
    where max_revenue_per_category.company = m.name
);




--------------------------------------------

Q10)For each company find out which customers have spent the most and the least amounts.


with CustomerSpending as
(
    select 
        m.mid as MerchantID, 
        m.name as MerchantName, 
        c.cid as CustomerID, 
        c.fullname as CustomerName, 
        sum(s.price * s.quantity_available) as TotalSpent
    from merchants m
    inner join sell s on m.mid = s.mid
    inner join products pd on s.pid = pd.pid
    inner join contain ct on pd.pid = ct.pid
    inner join place p on  ct.oid = p.oid
    inner join customers c on p.cid = c.cid
    group by m.mid, m.name, c.cid, c.fullname
)
select 
    cs.MerchantID, 
    cs.MerchantName,
    cs.CustomerID,
    cs.CustomerName,
    cs.TotalSpent
from CustomerSpending cs
inner join
(
    select MerchantID, max(TotalSpent) as MostSpent
    from CustomerSpending
    group by MerchantID
)as MostSpentPerMerchant on cs.MerchantID = MostSpentPerMerchant.MerchantID
    and cs.TotalSpent = MostSpentPerMerchant.MostSpent; 



with CustomerSpending as
(
    select 
        m.mid as MerchantID, 
        m.name as MerchantName, 
        c.cid as CustomerID, 
        c.fullname as CustomerName, 
        sum(s.price * s.quantity_available) as TotalSpent
    from merchants m
    inner join sell s on m.mid = s.mid
    inner join products pd on s.pid = pd.pid
    inner join contain ct on pd.pid = ct.pid
    inner join place p on  ct.oid = p.oid
    inner join customers c on p.cid = c.cid
    group by m.mid, m.name, c.cid, c.fullname
)
select 
    cs.MerchantID, 
    cs.MerchantName,
    cs.CustomerID,
    cs.CustomerName,
    cs.TotalSpent
from CustomerSpending cs
inner join
(
    select MerchantID, min(TotalSpent) as LeastSpent
    from CustomerSpending
    group by MerchantID
)as LeastSpentPerMerchant on cs.MerchantID = LeastSpentPerMerchant.MerchantID
    and cs.TotalSpent = LeastSpentPerMerchant.LeastSpent; 



OR


/*
with 
CustomerSpending as
(
    select 
        m.mid as MerchantID, 
        m.name as MerchantName, 
        c.cid as CustomerID, 
        c.fullname as CustomerName, 
        sum(s.price * s.quantity_available) as TotalSpent
    from merchants m
    inner join sell s on m.mid = s.mid
    inner join products pd on s.pid = pd.pid
    inner join contain ct on pd.pid = ct.pid
    inner join place p on  ct.oid = p.oid
    inner join customers c on p.cid = c.cid
    group by m.mid, m.name, c.cid, c.fullname
),

MostSpentPerMerchant as
(
    select MerchantID, CustomerID, TotalSpent
    from CustomerSpending
    where (MerchantID, TotalSpent) in 
    (
        select MerchantID, max(TotalSpent) as MostSpent
        from CustomerSpending
        group by MerchantID
    )
),

LeastSpentPerMerchant as (
    select MerchantID, CustomerID, TotalSpent
    from CustomerSpending
    where (MerchantID, TotalSpent) in 
    (
        select MerchantID, min(TotalSpent) as LeastSpent
        from CustomerSpending
        group by MerchantID
    )
)

select 
    cs.MerchantID, 
    cs.MerchantName,
    cs.CustomerID,
    cs.CustomerName,
    cs.TotalSpent,
    
    msc.CustomerID as MostSpentCustomerID,
    msc.CustomerName as MostSpentCustomerName,
    msc.MostSpent as MostSpentAmount,
    
    lsc.CustomerID as LeastSpentCustomerID,
    lsc.CustomerName as LeastSpentCustomerName,
    lsc.LeastSpent as LeastSpentAmount
from CustomerSpending cs
inner join MostSpentPerMerchant msc on cs.MerchantID = msc.MerchantID
inner join LeastSpentPerMerchant lsc on cs.MerchantID = lsc.MerchantID;
*/
